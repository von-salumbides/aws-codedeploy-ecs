- hosts: localhost
  connection: local
  gather_facts: no
  vars_files:
    - "vars/common.yml"
    - "vars/services.yml"
  tasks:
  - name: 1.1 -- Log In to ECS Repository
    shell: "aws ecr get-login-password --region {{ aws_region }} | docker login --username AWS --password-stdin {{ aws_account }}.dkr.ecr.{{ aws_region }}.amazonaws.com"
  - name: 1.2 -- Build the Docker image
    shell: cd ../ && docker build --rm --no-cache -t "{{ aws_project }}-{{ service }}-{{ aws_env }}:{{ branch_tag }}" .
    ignore_errors: yes

  - name: 1.3 -- Tag the ECR image
    shell: docker tag "{{ aws_project }}-{{ service }}-{{ aws_env }}:{{ branch_tag }}" \
            "{{ aws_account }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ aws_project }}-{{ service }}-{{ aws_env }}:{{ branch_tag }}"

  - name: 1.4 -- Push ECR image in
    shell: docker push "{{ aws_account }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ aws_project }}-{{ service }}-{{ aws_env }}:{{ branch_tag }}"

  - name: 1.5 -- Look up ECS Task Definition in {{ aws_env | upper }}
    shell: aws ecs list-task-definitions \
          --family-prefix "{{ aws_project }}-{{ service }}-{{ aws_env }}" \
          --region "{{ aws_region }}"
    register: td_details_cmd_out
  - set_fact:
      td_details: "{{ td_details_cmd_out.stdout | from_json() }}"
  - debug: msg="{{ td_details.taskDefinitionArns[0] }}"
    ignore_errors: yes

  - name: 1.6 -- Deregister ECS Task Definition in {{ aws_env | upper }}
    shell: aws ecs deregister-task-definition \
          --task-definition "{{ td_details.taskDefinitionArns[0] }}" \
          --region "{{ aws_region }}"
    ignore_errors: yes

  - name: 1.7 -- Create ECS Task Definition in {{ aws_env | upper }}
    ecs_taskdefinition:
      execution_role_arn: "arn:aws:iam::{{ aws_account }}:role/{{ aws_project }}-{{ service }}-role-{{ aws_env }}"
      task_role_arn: "arn:aws:iam::{{ aws_account }}:role/{{ aws_project }}-{{ service }}-role-{{ aws_env }}"
      launch_type: "FARGATE"
      cpu: "{{ cpu_container }}"
      memory: "{{ mem_reserv }}"
      network_mode: "awsvpc"
      containers:
        - name: "{{ aws_project }}-{{ service }}-{{ aws_env }}"
          cpu: "{{ cpu_container }}"
          memoryReservation: "{{ mem_reserv }}"
          essential: true
          image: "{{ aws_account }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ aws_project }}-{{ service }}-{{ aws_env }}:{{ branch_tag }}"
          logConfiguration:
            logDriver: "awslogs"
            options:
              awslogs-group: "/ecs/{{ aws_project }}-{{ service }}-{{ aws_env }}"
              awslogs-create-group: "true"
              awslogs-region: "{{ aws_region }}"
              awslogs-stream-prefix: "{{ aws_project }}-{{ service }}"
          portMappings:
          - containerPort: 80
            protocol: "tcp"
      family: "{{ aws_project }}-{{ service }}-{{ aws_env }}"
      state: "present"
      region: "{{ aws_region }}"
    register: ecs_td_details
  - debug: msg="{{ ecs_td_details }}"